---
#
#
### JENKINS SSH KEY
#
- name: Ensure .ssh folder
  file:
    state: directory
    path: "{{ jenkins_home }}/.ssh"
    mode: 0700
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group | default(jenkins_user, true) }}"
  become: true

- name: Generate key pair
  shell: 'ssh-keygen
    -b 2048
    -t rsa
    -f {{ jenkins_home }}/.ssh/id_rsa
    -q
    -N ""'
  args:
    creates: "{{ jenkins_home }}/.ssh/id_rsa"
  become: true

- name: Test public key
  shell: ssh-keygen -l -f {{ jenkins_home }}/.ssh/id_rsa.pub
  changed_when: false
  become: true

- name: Retrieve private key
  shell: cat {{ jenkins_home }}/.ssh/id_rsa
  register: jenkins_private_key
  changed_when: false
  become: true

- name: Add Jenkins SSH Key to credentials variable
  set_fact:
    jenkins_credentials_ssh_private_keys: "{{
      jenkins_credentials_ssh_private_keys + [{
        'id': 'jenkins.ssh',
        'username': 'jenkins',
        'name': 'Jenkins SSH Key',
        'privatekey': jenkins_private_key.stdout,
        'passphrase': jenkins_ssh_passphrase,
        'scope': 'GLOBAL'
      }] }}"

- name: Retrieve public key
  shell: cat {{ jenkins_home }}/.ssh/id_rsa.pub
  register: jenkins_public_key
  changed_when: false
  become: true

- name: Store public key as fact
  set_fact:
    jenkins_public_key: jenkins_public_key.stdout


#
#
### CREATE CREDENTIALS
#
- name: Get Jenkins crumb
  uri:
    url: '{{ jenkins_uri }}/crumbIssuer/api/json'
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    return_content: yes
  register: jenkins_crumb
  when: |
    (jenkins_github_enabled and jenkins_github_token != "")
    or jenkins_credentials_ssh_private_keys | count > 0
    or jenkins_credentials_secret_text | count > 0

# Reference
#  - https://www.greenreedtech.com/creating-jenkins-credentials-via-the-rest-api/
#
- name: Create Jenkins 'SSH Private Key' credentials
  vars:
    create_ssh_private_key:
      scope: "{{ item.scope | default('GLOBAL') }}"
      id: "{{ item.id | default('') }}"
      description: "{{ item.name }}"
      username: "{{ item.username | default('') }}"
      passphrase: "{{ item.passphrase | default('') }}"
      privateKeySource:
        stapler-class: "com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource"
        privateKey: "{{ item.privatekey | replace('+', '%2B') }}"
      stapler-class: "com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey"
  uri:
    method: POST
    url: '{{ jenkins_uri }}/credentials/store/system/domain/_/createCredentials'
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    headers:
      Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
    body: |
      json={
        "": "0",
        "credentials": {{ create_ssh_private_key | to_json }}
      }
    # Returns 302 when credential already exists
    status_code: 302,404
  register: result
  with_items: "{{ jenkins_credentials_ssh_private_keys }}"
  when: jenkins_credentials_ssh_private_keys | count > 0
  no_log: false


- name: Create Jenkins 'Secret Text' credentials
  uri:
    method: POST
    url: '{{ jenkins_uri }}/credentials/store/system/domain/_/createCredentials'
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    headers:
      Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
    body: |
      json={
        "": "0",
        "credentials": {
          "scope": "{{ item.scope | default('GLOBAL') }}",
          "id": "{{ item.id | default('') }}",
          "secret": "{{ item.secret }}",
          "description": "{{ item.name }}",
          "$class": "org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl"
        }
      }
    # Returns 302 when credential already exists
    status_code: 302,404
  register: result
  with_items: "{{ jenkins_credentials_secret_text }}"
  when: jenkins_credentials_secret_text | count > 0
  no_log: true
